# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.analyze_criteria import AnalyzeCriteria  # noqa: F401,E501
from swagger_server import util


class AnalyzeBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, origin: str=None, destination: str=None, weight_kg: float=None, volume_cbm: float=None, urgency: str=None, criteria: AnalyzeCriteria=None):  # noqa: E501
        """AnalyzeBody - a model defined in Swagger

        :param origin: The origin of this AnalyzeBody.  # noqa: E501
        :type origin: str
        :param destination: The destination of this AnalyzeBody.  # noqa: E501
        :type destination: str
        :param weight_kg: The weight_kg of this AnalyzeBody.  # noqa: E501
        :type weight_kg: float
        :param volume_cbm: The volume_cbm of this AnalyzeBody.  # noqa: E501
        :type volume_cbm: float
        :param urgency: The urgency of this AnalyzeBody.  # noqa: E501
        :type urgency: str
        :param criteria: The criteria of this AnalyzeBody.  # noqa: E501
        :type criteria: AnalyzeCriteria
        """
        self.swagger_types = {
            'origin': str,
            'destination': str,
            'weight_kg': float,
            'volume_cbm': float,
            'urgency': str,
            'criteria': AnalyzeCriteria
        }

        self.attribute_map = {
            'origin': 'origin',
            'destination': 'destination',
            'weight_kg': 'weight_kg',
            'volume_cbm': 'volume_cbm',
            'urgency': 'urgency',
            'criteria': 'criteria'
        }
        self._origin = origin
        self._destination = destination
        self._weight_kg = weight_kg
        self._volume_cbm = volume_cbm
        self._urgency = urgency
        self._criteria = criteria

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyzeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The analyze_body of this AnalyzeBody.  # noqa: E501
        :rtype: AnalyzeBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self) -> str:
        """Gets the origin of this AnalyzeBody.


        :return: The origin of this AnalyzeBody.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this AnalyzeBody.


        :param origin: The origin of this AnalyzeBody.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def destination(self) -> str:
        """Gets the destination of this AnalyzeBody.


        :return: The destination of this AnalyzeBody.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: str):
        """Sets the destination of this AnalyzeBody.


        :param destination: The destination of this AnalyzeBody.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def weight_kg(self) -> float:
        """Gets the weight_kg of this AnalyzeBody.


        :return: The weight_kg of this AnalyzeBody.
        :rtype: float
        """
        return self._weight_kg

    @weight_kg.setter
    def weight_kg(self, weight_kg: float):
        """Sets the weight_kg of this AnalyzeBody.


        :param weight_kg: The weight_kg of this AnalyzeBody.
        :type weight_kg: float
        """
        if weight_kg is None:
            raise ValueError("Invalid value for `weight_kg`, must not be `None`")  # noqa: E501

        self._weight_kg = weight_kg

    @property
    def volume_cbm(self) -> float:
        """Gets the volume_cbm of this AnalyzeBody.


        :return: The volume_cbm of this AnalyzeBody.
        :rtype: float
        """
        return self._volume_cbm

    @volume_cbm.setter
    def volume_cbm(self, volume_cbm: float):
        """Sets the volume_cbm of this AnalyzeBody.


        :param volume_cbm: The volume_cbm of this AnalyzeBody.
        :type volume_cbm: float
        """
        if volume_cbm is None:
            raise ValueError("Invalid value for `volume_cbm`, must not be `None`")  # noqa: E501

        self._volume_cbm = volume_cbm

    @property
    def urgency(self) -> str:
        """Gets the urgency of this AnalyzeBody.


        :return: The urgency of this AnalyzeBody.
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency: str):
        """Sets the urgency of this AnalyzeBody.


        :param urgency: The urgency of this AnalyzeBody.
        :type urgency: str
        """
        allowed_values = ["low", "medium", "high"]  # noqa: E501
        if urgency not in allowed_values:
            raise ValueError(
                "Invalid value for `urgency` ({0}), must be one of {1}"
                .format(urgency, allowed_values)
            )

        self._urgency = urgency

    @property
    def criteria(self) -> AnalyzeCriteria:
        """Gets the criteria of this AnalyzeBody.


        :return: The criteria of this AnalyzeBody.
        :rtype: AnalyzeCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria: AnalyzeCriteria):
        """Sets the criteria of this AnalyzeBody.


        :param criteria: The criteria of this AnalyzeBody.
        :type criteria: AnalyzeCriteria
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")  # noqa: E501

        self._criteria = criteria
