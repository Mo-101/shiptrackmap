# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AnalyzeCriteria(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cost: float=None, speed: float=None, reliability: float=None, risk_avoidance: float=None):  # noqa: E501
        """AnalyzeCriteria - a model defined in Swagger

        :param cost: The cost of this AnalyzeCriteria.  # noqa: E501
        :type cost: float
        :param speed: The speed of this AnalyzeCriteria.  # noqa: E501
        :type speed: float
        :param reliability: The reliability of this AnalyzeCriteria.  # noqa: E501
        :type reliability: float
        :param risk_avoidance: The risk_avoidance of this AnalyzeCriteria.  # noqa: E501
        :type risk_avoidance: float
        """
        self.swagger_types = {
            'cost': float,
            'speed': float,
            'reliability': float,
            'risk_avoidance': float
        }

        self.attribute_map = {
            'cost': 'cost',
            'speed': 'speed',
            'reliability': 'reliability',
            'risk_avoidance': 'risk_avoidance'
        }
        self._cost = cost
        self._speed = speed
        self._reliability = reliability
        self._risk_avoidance = risk_avoidance

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyzeCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The analyze_criteria of this AnalyzeCriteria.  # noqa: E501
        :rtype: AnalyzeCriteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self) -> float:
        """Gets the cost of this AnalyzeCriteria.


        :return: The cost of this AnalyzeCriteria.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: float):
        """Sets the cost of this AnalyzeCriteria.


        :param cost: The cost of this AnalyzeCriteria.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def speed(self) -> float:
        """Gets the speed of this AnalyzeCriteria.


        :return: The speed of this AnalyzeCriteria.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed: float):
        """Sets the speed of this AnalyzeCriteria.


        :param speed: The speed of this AnalyzeCriteria.
        :type speed: float
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501

        self._speed = speed

    @property
    def reliability(self) -> float:
        """Gets the reliability of this AnalyzeCriteria.


        :return: The reliability of this AnalyzeCriteria.
        :rtype: float
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability: float):
        """Sets the reliability of this AnalyzeCriteria.


        :param reliability: The reliability of this AnalyzeCriteria.
        :type reliability: float
        """
        if reliability is None:
            raise ValueError("Invalid value for `reliability`, must not be `None`")  # noqa: E501

        self._reliability = reliability

    @property
    def risk_avoidance(self) -> float:
        """Gets the risk_avoidance of this AnalyzeCriteria.


        :return: The risk_avoidance of this AnalyzeCriteria.
        :rtype: float
        """
        return self._risk_avoidance

    @risk_avoidance.setter
    def risk_avoidance(self, risk_avoidance: float):
        """Sets the risk_avoidance of this AnalyzeCriteria.


        :param risk_avoidance: The risk_avoidance of this AnalyzeCriteria.
        :type risk_avoidance: float
        """
        if risk_avoidance is None:
            raise ValueError("Invalid value for `risk_avoidance`, must not be `None`")  # noqa: E501

        self._risk_avoidance = risk_avoidance
